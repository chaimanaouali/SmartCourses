# Generated by Django 4.2.7 on 2025-10-24 23:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('course_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('service_type', models.CharField(choices=[('quiz_generation', 'Quiz Generation'), ('performance_analysis', 'Performance Analysis'), ('recommendation_engine', 'Recommendation Engine'), ('adaptive_learning', 'Adaptive Learning')], max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('api_endpoint', models.URLField(blank=True)),
                ('api_key', models.CharField(blank=True, max_length=200)),
                ('configuration', models.JSONField(default=dict, help_text='Service configuration parameters')),
                ('usage_count', models.IntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('quiz_type', models.CharField(choices=[('auto', 'Auto-generated'), ('manual', 'Manual'), ('adaptive', 'Adaptive')], default='auto', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=20)),
                ('time_limit', models.IntegerField(default=30, help_text='Time limit in minutes')),
                ('passing_score', models.IntegerField(default=70, help_text='Passing score percentage')),
                ('max_attempts', models.IntegerField(default=3, help_text='Maximum number of attempts')),
                ('questions', models.JSONField(default=list, help_text='List of quiz questions with answers')),
                ('ai_generated', models.BooleanField(default=False)),
                ('generation_prompt', models.TextField(blank=True, help_text='Prompt used for AI generation')),
                ('total_attempts', models.IntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('completion_rate', models.FloatField(default=0.0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='course_app.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_quizzes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('open_ended', 'Open Ended'), ('fill_blank', 'Fill in the Blank')], max_length=20)),
                ('options', models.JSONField(default=list, help_text='Answer options for multiple choice')),
                ('correct_answer', models.TextField()),
                ('explanation', models.TextField(blank=True, help_text='Explanation for the correct answer')),
                ('points', models.IntegerField(default=1)),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=20)),
                ('order', models.IntegerField(default=0)),
                ('ai_generated', models.BooleanField(default=False)),
                ('confidence_score', models.FloatField(default=0.0, help_text='AI confidence in question quality')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_objects', to='quiz_app.quiz')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('time_taken', models.IntegerField(blank=True, help_text='Time taken in minutes', null=True)),
                ('answers', models.JSONField(default=dict, help_text="User's answers to questions")),
                ('correct_answers', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField(default=0)),
                ('ai_feedback', models.TextField(blank=True, help_text='AI-generated feedback')),
                ('strengths', models.JSONField(default=list, help_text='Identified strengths')),
                ('weaknesses', models.JSONField(default=list, help_text='Identified weaknesses')),
                ('recommendations', models.JSONField(default=list, help_text='AI recommendations')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='quiz_app.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('average_score', models.FloatField()),
                ('total_attempts', models.IntegerField()),
                ('best_score', models.FloatField()),
                ('worst_score', models.FloatField()),
                ('improvement_rate', models.FloatField(help_text='Percentage improvement over time')),
                ('time_spent', models.IntegerField(default=0, help_text='Total time spent in minutes')),
                ('completion_rate', models.FloatField(default=0.0)),
                ('difficulty_progression', models.JSONField(default=list, help_text='Difficulty progression over time')),
                ('learning_patterns', models.JSONField(default=list, help_text='Identified learning patterns')),
                ('knowledge_gaps', models.JSONField(default=list, help_text='Identified knowledge gaps')),
                ('recommended_topics', models.JSONField(default=list, help_text='AI recommended topics to study')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='quiz_app.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
    ]
